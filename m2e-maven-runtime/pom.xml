<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2011, 2021 Sonatype, Inc. and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License 2.0
	which accompanies this distribution, and is available at
	https://www.eclipse.org/legal/epl-2.0/

	SPDX-License-Identifier: EPL-2.0
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.eclipse.m2e</groupId>
		<artifactId>m2e-core</artifactId>
		<version>1.16.0-SNAPSHOT</version>
	</parent>

	<artifactId>m2e-maven-runtime</artifactId>
	<packaging>pom</packaging>

	<name>M2E - Maven runtime bundles</name>

	<properties>
		<dependency.jars.folder>jars</dependency.jars.folder>
		<dependency.sources.folder>jars/sources</dependency.sources.folder>
	</properties>

	<modules>
		<module>org.eclipse.m2e.archetype.common</module>
		<module>org.eclipse.m2e.maven.indexer</module>
		<module>org.eclipse.m2e.maven.runtime</module>
		<module>org.eclipse.m2e.maven.runtime.slf4j.simple</module>
	</modules>

	<dependencies>
		<!-- globally excluded transitive dependencies (set their scope to 'provided') -->
		<dependency>
			<!-- as of version 1.3.9 includes LGPL'ed sources, can't ship with an EPL project -->
			<!-- http://dev.eclipse.org/ipzilla/show_bug.cgi?id=7302 -->
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>[1.0.0,)</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<version>5.1.2</version>
					<configuration>
						<supportedProjectTypes>eclipse-plugin</supportedProjectTypes>
						<!-- PDE does not honor custom manifest location -->
						<manifestLocation>META-INF</manifestLocation>
						<instructions>
							<Embed-Dependency>*;scope=compile|runtime</Embed-Dependency>
							<Embed-Transitive>true</Embed-Transitive>
							<Embed-Directory>${dependency.jars.folder}</Embed-Directory>

							<_failok>true</_failok>
							<_nouses>true</_nouses>
							<_nodefaultversion>true</_nodefaultversion>
							<_snapshot>qualifier</_snapshot>

							<Bundle-SymbolicName>${project.artifactId};singleton:=true</Bundle-SymbolicName>
							<Bundle-RequiredExecutionEnvironment>JavaSE-11</Bundle-RequiredExecutionEnvironment>
							<Bundle-Name>${project.name}</Bundle-Name>
							<Bundle-Vendor>Eclipse.org - m2e</Bundle-Vendor>
							<Bundle-ClassPath>.,{maven-dependencies}</Bundle-ClassPath>
							<Automatic-Module-Name>${project.artifactId}</Automatic-Module-Name>

							<Import-Package>!*</Import-Package>
							<Eclipse-BundleShape>dir</Eclipse-BundleShape>
						</instructions>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-packaging-plugin</artifactId>
					<configuration>
						<jgit.ignore>
							.project
							.classpath
							.settings/
							.polyglot.*
							build.properties
						</jgit.ignore>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.2.0</version>
					<configuration>
						<overWriteReleases>true</overWriteReleases>
						<overWriteSnapshots>true</overWriteSnapshots>
						<excludeScope>provided</excludeScope>
						<includeScope>runtime</includeScope> <!-- only include runtime and compile time dependencies, not test or provided! -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-source-plugin</artifactId>
					<version>${tycho-version}</version>
					<configuration>
						<additionalFileSets>
							<fileSet>
								<directory>${project.build.directory}/${dependency.sources.folder}</directory>
								<includes>
									<include>**/*</include>
								</includes>
							</fileSet>
						</additionalFileSets>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>fetch-flat-dependency-sources</id> <!-- These are used to build source-plugins -->
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>process-resources</phase>
						<configuration>
							<outputDirectory>${project.build.directory}/${dependency.sources.folder}</outputDirectory>
							<classifier>sources</classifier>
							<useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>move-java-files-to-source-bundle-root</id>
						<goals>
							<goal>run</goal>
						</goals>
						<phase>process-resources</phase>
						<configuration>
							<target>
								<taskdef resource="net/sf/antcontrib/antlib.xml" />
								<for param="javaFile">
									<!--Ant-contrib tasks already defined in calling script -->
									<dirset dir="${project.build.directory}/${dependency.sources.folder}" erroronmissingdir="false">
										<depth min="0" max="0" />
									</dirset>
									<sequential>
										<local name="dirName" />
										<basename property="dirName" file="@{javaFile}" />
										<move todir="${project.build.directory}/${dependency.sources.folder}">
											<fileset dir="${project.build.directory}/${dependency.sources.folder}/${dirName}">
												<include name="**/*.java" />
											</fileset>
										</move>
										<!-- Delete now empty directories -->
										<delete includeemptydirs="true">
											<fileset dir="${project.build.directory}/${dependency.sources.folder}">
												<and>
													<size value="0" />
													<type type="dir" />
												</and>
											</fileset>
										</delete>

									</sequential>
								</for>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>generate-osgi-metadata</id>
			<!-- Generate the OSGi metadata for the Maven-Runtime bundles as described in the co-located README.md -->
			<build>
				<pluginManagement>
					<plugins>
						<!-- Disable Tycho plug-ins that would fail in the first pure Maven build because the MANIFEST.MF does not yet exist -->
						<plugin>
							<groupId>org.eclipse.tycho</groupId>
							<artifactId>tycho-packaging-plugin</artifactId>
							<executions>
								<execution>
									<id>default-build-qualifier</id>
									<phase>none</phase>
								</execution>
								<execution>
									<id>default-validate-id</id>
									<phase>none</phase>
								</execution>
								<execution>
									<id>default-validate-version</id>
									<phase>none</phase>
								</execution>
							</executions>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<configuration>
							<filesets>
								<fileset>
									<directory>${dependency.jars.folder}</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>fetch-dependencies</id>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<phase>generate-sources</phase>
								<configuration>
									<outputDirectory>${project.basedir}/${dependency.jars.folder}</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<id>fetch-dependency-sources</id> <!-- These are used in the workspace -->
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<phase>generate-sources</phase>
								<configuration>
									<outputDirectory>${project.basedir}/${dependency.sources.folder}</outputDirectory>
									<classifier>sources</classifier>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.felix</groupId>
						<artifactId>maven-bundle-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-manifest</id>
								<goals>
									<goal>manifest</goal>
								</goals>
								<phase>generate-sources</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-classpath-file</id>
								<goals>
									<goal>run</goal>
								</goals>
								<phase>generate-sources</phase>
								<configuration>
									<target>
										<taskdef resource="net/sf/antcontrib/antlib.xml" />
										<!-- See last answer of https://stackoverflow.com/questions/4368243/maven-antrun-with-sequential-ant-contrib-fails-to-run/45958355 -->
										<!-- and http://ant-contrib.sourceforge.net/tasks/tasks/index.html -->
										<if>
											<equals arg1="${project.packaging}" arg2="pom" /> <!-- only consider children of m2e-maven-runtime project -->
											<then>
												<echo message="Skip creation of .classpath file for pom project" />
											</then>
											<else>
												<echo file="${project.basedir}/.classpath"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11">
		<attributes>
			<attribute name="module" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
	<classpathentry kind="output" path="target/classes"/>
												]]></echo>
												<loadproperties srcFile="${project.basedir}/build.properties" prefix="buildProperties." />
												<!-- Append source-folder entries (projects may contain multiple) -->
												<for param="sourceFolder" list="${buildProperties.source..}" delimiter="," trim="true">
													<sequential>
														<echo message="&#xA;&#x9;" file="${project.basedir}/.classpath" append="true" />
														<echo file="${project.basedir}/.classpath" append="true"><![CDATA[
															<classpathentry kind="src" path="@{sourceFolder}"/>
														]]></echo>
													</sequential>
												</for>
												<!-- Append library-entries (one for each embedded jar) -->
												<for param="jarFile"><!--Ant-contrib tasks already defined in calling script -->
													<fileset dir="${project.basedir}/${dependency.jars.folder}" includes="*.jar" />
													<sequential>
														<local name="jarFilename" />
														<basename property="jarFilename" file="@{jarFile}" suffix=".jar" />
														<echo message="&#xA;&#x9;" file="${project.basedir}/.classpath" append="true" />
														<echo file="${project.basedir}/.classpath" append="true"><![CDATA[
															<classpathentry exported="true" kind="lib" path="${dependency.jars.folder}/${jarFilename}.jar" sourcepath="${dependency.sources.folder}/${jarFilename}-sources.jar"/>
														]]></echo>
													</sequential>
												</for>
												<echo message="&#xA;" file="${project.basedir}/.classpath" append="true" />
												<echo file="${project.basedir}/.classpath" append="true"><![CDATA[</classpath>]]></echo>
												<echo message="&#xA;" file="${project.basedir}/.classpath" append="true" />
											</else>
										</if>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
