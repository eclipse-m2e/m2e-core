<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2011, 2021 Sonatype, Inc. and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License 2.0
	which accompanies this distribution, and is available at
	https://www.eclipse.org/legal/epl-2.0/

	SPDX-License-Identifier: EPL-2.0
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.eclipse.m2e</groupId>
		<artifactId>m2e-parent</artifactId>
		<version>2.1.0-SNAPSHOT</version>
		<relativePath>../m2e-parent</relativePath>
	</parent>

	<artifactId>m2e-maven-runtime</artifactId>
	<packaging>pom</packaging>

	<name>M2E - Maven runtime bundles</name>

	<properties>
		<jars.directory>target/jars</jars.directory>
		<outputDirectory.sources>${project.build.directory}/classes-source</outputDirectory.sources>
		<failIfMacSigningFailed>false</failIfMacSigningFailed>
		<buildqualifier.format>%Y%m%d-%H%M</buildqualifier.format>
	</properties>

	<modules>
		<module>org.eclipse.m2e.archetype.common</module>
		<module>org.eclipse.m2e.maven.runtime</module>
	</modules>

	<dependencies>
		<!-- globally excluded transitive dependencies (set their scope to 'provided') -->
		<dependency>
			<!-- as of version 1.3.9 includes LGPL'ed sources, can't ship with an EPL project -->
			<!-- http://dev.eclipse.org/ipzilla/show_bug.cgi?id=7302 -->
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>[1.0.0,)</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}_${qualifiedVersion}</finalName> <!-- Use Eclipse jar naming schema -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>biz.aQute.bnd</groupId>
					<artifactId>bnd-maven-plugin</artifactId>
					<version>6.4.0</version>
					<extensions>true</extensions>
					<configuration>
						<bnd>
							<![CDATA[
								-includeresource: jars/=${jars.directory}/;recursive:=false;lib:=true

								-failok: true
								-nouses: true
								-nodefaultversion: true
								-noextraheaders: true
								-snapshot: ${buildQualifier}
								-removeheaders: Private-Package

								Import-Package: !*
								Automatic-Module-Name: ${bsn}
								Eclipse-BundleShape: dir
								Eclipse-SourceReferences: ${scmConnectionRaw};path="${gitRelativePath}";commitId=${gitCommitId}
							]]>
						</bnd>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.10.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
						<proc>none</proc>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.4.0</version>
					<configuration>
						<overWriteIfNewer>true</overWriteIfNewer>
						<includeScope>runtime</includeScope> <!-- only include runtime and compile time dependencies, not test or provided! -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>3.1.0</version>
					<dependencies>
						<dependency>
							<groupId>ant-contrib</groupId>
							<artifactId>ant-contrib</artifactId>
							<version>1.0b3</version>
							<exclusions>
								<exclusion>
									<groupId>ant</groupId>
									<artifactId>ant</artifactId>
								</exclusion>
							</exclusions>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-plugin</artifactId>
					<version>${tycho-version}</version>
					<configuration>
						<supportedProjectTypes>
							<value>jar</value>
						</supportedProjectTypes>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>animal-sniffer-maven-plugin</artifactId>
				<version>1.22</version>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<signature>
								<groupId>org.codehaus.mojo.signature</groupId>
								<artifactId>java18</artifactId>
								<version>1.0</version>
							</signature>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>fetch-dependency-jars</id>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>${project.basedir}/${jars.directory}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<?m2e ignore?>
						<id>unpack-dependency-sources-java</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>${outputDirectory.sources}</outputDirectory>
							<classifier>sources</classifier>
							<includes>**/*.java</includes>
						</configuration>
					</execution>
					<execution>
						<?m2e ignore?>
						<id>unpack-dependency-sources-resources</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>${outputDirectory.sources}</outputDirectory>
							<classifier>sources</classifier>
							<excludes>**/*.java</excludes>
							<useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<!-- TODO: Make the tycho-packaging-plugin:build-qualifier goal to work with non 'eclipse-plugin' typed projects -->
						<?m2e execute onIncremental?>
						<id>generate-build-qualifier</id>
						<goals>
							<goal>run</goal>
						</goals>
						<phase>initialize</phase>
						<configuration>
							<exportAntProperties>true</exportAntProperties>
							<target>
								<taskdef resource="net/sf/antcontrib/antlib.xml" />
								<mkdir dir="${project.build.directory}/git" />

								<exec executable="git" dir="${project.basedir}" output="${project.build.directory}/git/buildQualifier" failonerror="true">
									<arg value="log" />
									<arg value="-n 1" />
									<arg value="--pretty=format:%cd" />
									<arg value="--date=format:${buildqualifier.format}" />
									<arg value="." />
								</exec>
								<loadfile property="buildQualifier" srcFile="${project.build.directory}/git/buildQualifier" />
								<delete file="${project.build.directory}/git/buildQualifier" />
								<propertyregex property="buildQualifier" input="${buildQualifier}" regexp="\s" replace="" override="true" /> <!-- strip off leading/trailing whitespace -->
								<echo message="buildQualifier: ${buildQualifier}" level="info" />

								<property name="outputTimestamp" value="${buildQualifier}" />
								<propertyregex property="qualifiedVersion" input="${project.version}" regexp="-SNAPSHOT" replace=".${buildQualifier}" />
								<echo message="qualifiedVersion: ${qualifiedVersion}" level="info" />

								<exec executable="git" dir="${project.basedir}" output="${project.build.directory}/git/commitId" failonerror="true">
									<arg value="log" />
									<arg value="-n 1" />
									<arg value="--pretty=format:%H" />
									<arg value="." />
								</exec>
								<loadfile property="gitCommitId" srcFile="${project.build.directory}/git/commitId" />
								<delete file="${project.build.directory}/git/commitId" />
								<propertyregex property="gitCommitId" input="${gitCommitId}" regexp="\s" replace="" override="true" /> <!-- strip off leading/trailing whitespace -->
								<echo message="gitCommitHash: ${gitCommitId}" level="info" />

								<exec executable="git" dir="${project.basedir}" output="${project.build.directory}/git/relativePath" failonerror="true">
									<arg value="rev-parse" />
									<arg value="--show-prefix" />
								</exec>
								<loadfile property="gitRelativePath" srcFile="${project.build.directory}/git/relativePath" />
								<delete file="${project.build.directory}/git/relativePath" />
								<propertyregex property="gitRelativePath" input="${gitRelativePath}" regexp="\s" replace="" global="true" override="true" /> <!-- strip off leading/trailing whitespace -->
								<echo message="gitRelativePath: ${gitRelativePath}" level="info" />
							</target>
						</configuration>
					</execution>
					<execution>
						<?m2e ignore?>
						<id>build-sources-jar</id>
						<goals>
							<goal>run</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<target>
								<taskdef resource="net/sf/antcontrib/antlib.xml" />
								<if>
									<equals arg1="${project.packaging}" arg2="pom" /> <!-- only consider children of m2e-maven-runtime project -->
									<then>
										<echo message="Skip packing sources jar for pom project" />
									</then>
									<else>
										<!-- Delete directories that are empty after moving the java-sources to the root -->
										<delete includeemptydirs="true">
											<fileset dir="${outputDirectory.sources}">
												<and>
													<size value="0" />
													<type type="dir" />
												</and>
											</fileset>
										</delete>
										<jar destfile="${project.build.directory}/${project.artifactId}.source_${qualifiedVersion}.jar"
											manifestencoding="UTF-8" defaultexcludes="false" duplicate="fail">
											<fileset dir="src/main/java" erroronmissingdir="false" />
											<fileset dir="src/main/resources" erroronmissingdir="false" />
											<fileset dir="${outputDirectory.sources}" />
										</jar>
									</else>
								</if>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>prepare-jar-with-manifest</id>
						<goals>
							<goal>bnd-process</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
					<skipIfEmpty>true</skipIfEmpty>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<?m2e ignore?>
						<id>attach-sources-artifact</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/${project.artifactId}.source_${qualifiedVersion}.jar</file>
									<type>java-source</type>
									<classifier>sources</classifier>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-source-plugin</artifactId>
				<version>${tycho-version}</version>
				<executions>
					<execution>
						<?m2e ignore?>
						<id>generate-pde-source-header</id>
						<goals>
							<goal>generate-pde-source-header</goal>
						</goals>
						<phase>package</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>eclipse-sign</id>
			<properties>
				<failIfMacSigningFailed>true</failIfMacSigningFailed>
			</properties>
		</profile>
		<profile>
			<id>eclipse-sign-jnilibs</id>
			<activation>
				<file>
					<exists>eclipse-sign-jnilibs.properties</exists>
				</file>
			</activation>
			<!-- 
			To activate jnilib signing for a bundle, create a file in the project called 'eclipse-sign-jnilibs.properties' and
			define as value of the key 'jars.directory' the directory that contains the jars whose *.jnilib files have to be signed.
			The following ant-script then extracts all .jnilib files, sign them and repacks them into the jar file. 
			-->
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<?m2e ignore?>
								<id>sign-jnilibs-files</id>
								<goals>
									<goal>run</goal>
								</goals>
								<phase>generate-resources</phase> <!-- Do this before extracting sources-->
								<configuration>
									<target>
										<!-- See last answer of https://stackoverflow.com/questions/4368243/maven-antrun-with-sequential-ant-contrib-fails-to-run/45958355 -->
										<!-- and http://ant-contrib.sourceforge.net/tasks/tasks/index.html -->
										<taskdef resource="net/sf/antcontrib/antlib.xml" />
										<loadproperties srcFile="${project.basedir}/eclipse-sign-jnilibs.properties" prefix="signProperties." />
										<for param="jarFile">
											<fileset dir="${project.basedir}/${signProperties.jars.directory}" includes="**/*.jar" />
											<sequential>
												<local name="jarFilename" />
												<basename property="jarFilename" file="@{jarFile}" suffix=".jar" />
												<local name="signingDir" />
												<property name="signingDir" value="${project.build.directory}/jnilibs-signing/${jarFilename}" />

												<unzip src="@{jarFile}" dest="${signingDir}">
													<patternset includes="**/*.jnilib" />
												</unzip>

												<for param="jnilibFileAbsolute">
													<fileset dir="${signingDir}" includes="**/*.jnilib" erroronmissingdir="false" />
													<sequential>
														<echo level="info" message="Mac-sign @{jnilibFileAbsolute}" />
														<local name="jnilibFile" />
														<property name="jnilibFile" value="@{jnilibFileAbsolute}" relative="true" basedir="${signingDir}" />
														<move file="@{jnilibFileAbsolute}" tofile="@{jnilibFileAbsolute}-tosign" />
														<exec executable="curl" dir="${signingDir}" failonerror="${failIfMacSigningFailed}">
															<arg value="-o" />
															<arg value="${jnilibFile}" />
															<arg value="-F" />
															<arg value="file=@${jnilibFile}-tosign" />
															<arg value="https://cbi.eclipse.org/macos/codesign/sign" />
														</exec>
														<exec executable="jar" dir="${signingDir}" failonerror="${failIfMacSigningFailed}">
															<arg value="--update" />
															<arg value="--file=@{jarFile}" />
															<arg value="${jnilibFile}" />
														</exec>
													</sequential>
												</for>
											</sequential>
										</for>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
