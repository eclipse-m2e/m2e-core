<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2008, 2023 Sonatype, Inc. and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License 2.0
	which accompanies this distribution, and is available at
	https://www.eclipse.org/legal/epl-2.0/

	SPDX-License-Identifier: EPL-2.0
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.eclipse.m2e</groupId>
		<artifactId>m2e-parent</artifactId>
		<version>2.1.0-SNAPSHOT</version>
		<relativePath>../m2e-parent</relativePath>
	</parent>

	<artifactId>org.eclipse.m2e.maven.runtime</artifactId>
	<version>3.9.400-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>M2E Embedded Maven Runtime (includes Incubating components)</name>

	<properties>
		<!-- maven core version -->
		<maven-core.version>3.9.4</maven-core.version>
		<!-- NOTE: When maven-core.version changes, this may impact the versions of the maven-resolver-*
			jars that export the org.eclipse.aether.* packages in the org.eclipse.m2e.maven.runtime
			bundle. So make sure the following variable has the value of the maven-resolver-* jars
			https://bugs.eclipse.org/bugs/show_bug.cgi?id=529540 -->
		<maven-resolver.version>1.9.14</maven-resolver.version>
		<!-- below are m2e-specific addons -->
		<plexus-build-api.version>0.0.7</plexus-build-api.version>
		<okhttp-connector.version>0.17.8</okhttp-connector.version>
		<jars.directory>target/jars</jars.directory>
		<outputDirectory.sources>${project.build.directory}/classes-source</outputDirectory.sources>
		<failIfMacSigningFailed>false</failIfMacSigningFailed>
		<buildqualifier.format>%Y%m%d-%H%M</buildqualifier.format>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-core</artifactId>
			<exclusions>
				<!-- Excluded dependencies are fulfilled via the OSGi requirements specified below as Import-Package/Require-Bundle and
					therefore don't have to be embedded. Or they are not required. -->
				<exclusion>
					<groupId>org.checkerframework</groupId>
					<artifactId>checker-compat-qual</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-embedder</artifactId>
			<exclusions>
				<exclusion>
					<groupId>commons-cli</groupId>
					<artifactId>commons-cli</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-compat</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.sisu</groupId>
			<artifactId>org.eclipse.sisu.plexus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.sonatype.plexus</groupId>
			<artifactId>plexus-build-api</artifactId>
			<version>${plexus-build-api.version}</version>
		</dependency>
		<dependency>
			<groupId>io.takari.aether</groupId>
			<artifactId>aether-connector-okhttp</artifactId>
			<version>${okhttp-connector.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.eclipse.aether</groupId>
					<artifactId>aether-util</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.resolver</groupId>
			<artifactId>maven-resolver-impl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.resolver</groupId>
			<artifactId>maven-resolver-connector-basic</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.resolver</groupId>
			<artifactId>maven-resolver-transport-wagon</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.wagon</groupId>
			<artifactId>wagon-file</artifactId>
		</dependency>
		<dependency>
			<groupId>org.fusesource.jansi</groupId>
			<artifactId>jansi</artifactId>
		</dependency>
		<dependency>
			<!-- SLF4J-binding only used by a launched Maven-runtime.
				Keep the BND-instructions below in sync with this jar's name. -->
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-slf4j-provider</artifactId>
		</dependency>
		<!-- globally excluded transitive dependencies (set their scope to 'provided') -->
		<dependency>
			<!-- as of version 1.3.9 includes LGPL'ed sources, can't ship with an EPL project -->
			<!-- http://dev.eclipse.org/ipzilla/show_bug.cgi?id=7302 -->
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>[1.0.0,)</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>failureaccess</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>2.0.7</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.apache.maven</groupId>
				<artifactId>maven</artifactId>
				<version>${maven-core.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>${project.artifactId}_${qualifiedVersion}</finalName> <!-- Use Eclipse jar naming schema -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>biz.aQute.bnd</groupId>
					<artifactId>bnd-maven-plugin</artifactId>
					<version>6.4.0</version>
					<extensions>true</extensions>
					<configuration>
						<bnd><![CDATA[
							# When launching a Maven build using this embedded runtime, we want the embedded SLF4J logger binding to be used.
							# However when the this Maven runtime is used within the Eclipse-IDE(-JVM) we don't want it to use the embedded SLF4J-binding
							# but instead use the SLF4J-binding provided by the Eclipse runtime. This is achived by making the embedded SLF4J-binding invisible
							# for OSGi, by simply NOT placing the binding's jar on the Bundle-ClassPath.
							slf4jBinding=maven-slf4j-provider-${maven-core.version}.jar
							M2E-SLF4JBinding=jars/${slf4jBinding}
							-includeresource: \
								jars/=${jars.directory}/;recursive:=false;lib:=true;filter:=!${slf4jBinding},\
								jars/=${jars.directory}/${slf4jBinding};lib:=false
							-exportcontents: \
								META-INF.plexus;-noimport:=true;x-internal:=true,\
								META-INF.sisu;-noimport:=true;x-internal:=true,\
								org.eclipse.m2e.internal.maven.listener;x-friends:="org.eclipse.m2e.launching",\
								org.apache.maven.*;provider=m2e;mandatory:=provider,\
								org.codehaus.plexus.*;provider=m2e;mandatory:=provider,\
								org.sonatype.plexus.*;provider=m2e;mandatory:=provider,\
								org.eclipse.aether.*;provider=m2e;mandatory:=provider;version=${maven-resolver.version},\
								com.google.inject.*;provider=m2e;mandatory:=provider,\
								io.takari.*;provider=m2e;mandatory:=provider,\
								org.eclipse.sisu.*;provider=m2e;mandatory:=provider;version=${maven-resolver.version}
							Import-Package: \
								org.slf4j;version="[1.7.31,3.0.0)",\
								org.slf4j.*;version="[1.7.31,3.0.0)",\
								javax.inject;version="1.0.0",\
								javax.annotation;version="[1.2.0,2.0.0)", \
								org.apache.commons.cli;version="[1.4.0,2.0.0)"
							Require-Bundle: \
								com.google.guava;bundle-version="32.0.1"

							-failok: true
							-nouses: true
							-nodefaultversion: true
							-noextraheaders: true
							-snapshot: ${def;buildQualifier;qualifier}
							-removeheaders: Private-Package

							Automatic-Module-Name: ${bsn}
							Eclipse-BundleShape: dir
							
							gitCommitId = ${system;git log -n 1 --pretty=format:%H .}
							gitRelativePath = ${system;git rev-parse --show-prefix};
							Eclipse-SourceReferences: ${scmConnectionRaw};path="${gitRelativePath}";commitId=${gitCommitId}
						]]></bnd>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.10.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
						<proc>none</proc>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.4.0</version>
					<configuration>
						<overWriteIfNewer>true</overWriteIfNewer>
						<includeScope>runtime</includeScope> <!-- only include runtime and compile time dependencies, not test or provided! -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.0</version>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-plugin</artifactId>
					<version>${tycho-version}</version>
					<configuration>
						<supportedProjectTypes>
							<value>jar</value>
						</supportedProjectTypes>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>animal-sniffer-maven-plugin</artifactId>
				<version>1.22</version>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<signature>
								<groupId>org.codehaus.mojo.signature</groupId>
								<artifactId>java18</artifactId>
								<version>1.0</version>
							</signature>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-packaging-plugin</artifactId>
				<configuration>
					<jgit.ignore>NOTHING</jgit.ignore> <!-- Overwrite values from parent -->
				</configuration>
				<executions>
					<execution>
						<?m2e execute onIncremental?>
						<id>compute-qualifier</id>
						<goals>
							<goal>build-qualifier</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>fetch-dependency-jars</id>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>${project.basedir}/${jars.directory}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<?m2e ignore?>
						<id>unpack-dependency-sources-java</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>${outputDirectory.sources}</outputDirectory>
							<classifier>sources</classifier>
							<includes>**/*.java</includes>
						</configuration>
					</execution>
					<execution>
						<?m2e ignore?>
						<id>unpack-dependency-sources-resources</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>${outputDirectory.sources}</outputDirectory>
							<classifier>sources</classifier>
							<excludes>**/*.java</excludes>
							<useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>prepare-jar-with-manifest</id>
						<goals>
							<goal>bnd-process</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.sisu</groupId>
				<artifactId>sisu-maven-plugin</artifactId>
				<version>0.3.5</version>
				<executions>
					<execution>
						<?m2e execute onIncremental?>
						<id>index-plexus</id>
						<phase>process-classes</phase>
						<goals>
							<goal>main-index</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
					<skipIfEmpty>true</skipIfEmpty>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<?m2e ignore?>
						<id>add-source-resources</id>
						<phase>package</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${outputDirectory.sources}</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<?m2e ignore?>
						<id>sources-jar</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-source-plugin</artifactId>
				<version>${tycho-version}</version>
				<executions>
					<execution>
						<?m2e ignore?>
						<id>generate-pde-source-header</id>
						<goals>
							<goal>generate-pde-source-header</goal>
						</goals>
						<phase>package</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>eclipse-sign</id>
			<properties>
				<failIfMacSigningFailed>true</failIfMacSigningFailed>
			</properties>
		</profile>
		<profile>
			<id>eclipse-sign-jnilibs</id>
			<activation>
				<file>
					<exists>eclipse-sign-jnilibs.properties</exists>
				</file>
			</activation>
			<!-- 
			To activate jnilib signing for a bundle, create a file in the project called 'eclipse-sign-jnilibs.properties' and
			define as value of the key 'jars.directory' the directory that contains the jars whose *.jnilib files have to be signed.
			The following ant-script then extracts all .jnilib files, sign them and repacks them into the jar file. 
			-->
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<?m2e ignore?>
								<id>sign-jnilibs-files</id>
								<goals>
									<goal>run</goal>
								</goals>
								<phase>generate-resources</phase> <!-- Do this before extracting sources-->
								<configuration>
									<target>
										<!-- See last answer of https://stackoverflow.com/questions/4368243/maven-antrun-with-sequential-ant-contrib-fails-to-run/45958355 -->
										<!-- and http://ant-contrib.sourceforge.net/tasks/tasks/index.html -->
										<taskdef resource="net/sf/antcontrib/antlib.xml" />
										<loadproperties srcFile="${project.basedir}/eclipse-sign-jnilibs.properties" prefix="signProperties." />
										<for param="jarFile">
											<fileset dir="${project.basedir}/${signProperties.jars.directory}" includes="**/*.jar" />
											<sequential>
												<local name="jarFilename" />
												<basename property="jarFilename" file="@{jarFile}" suffix=".jar" />
												<local name="signingDir" />
												<property name="signingDir" value="${project.build.directory}/jnilibs-signing/${jarFilename}" />

												<unzip src="@{jarFile}" dest="${signingDir}">
													<patternset includes="**/*.jnilib" />
												</unzip>

												<for param="jnilibFileAbsolute">
													<fileset dir="${signingDir}" includes="**/*.jnilib" erroronmissingdir="false" />
													<sequential>
														<echo level="info" message="Mac-sign @{jnilibFileAbsolute}" />
														<local name="jnilibFile" />
														<property name="jnilibFile" value="@{jnilibFileAbsolute}" relative="true" basedir="${signingDir}" />
														<move file="@{jnilibFileAbsolute}" tofile="@{jnilibFileAbsolute}-tosign" />
														<exec executable="curl" dir="${signingDir}" failonerror="${failIfMacSigningFailed}">
															<arg value="-o" />
															<arg value="${jnilibFile}" />
															<arg value="-F" />
															<arg value="file=@${jnilibFile}-tosign" />
															<arg value="https://cbi.eclipse.org/macos/codesign/sign" />
														</exec>
														<exec executable="jar" dir="${signingDir}" failonerror="${failIfMacSigningFailed}">
															<arg value="--update" />
															<arg value="--file=@{jarFile}" />
															<arg value="${jnilibFile}" />
														</exec>
													</sequential>
												</for>
											</sequential>
										</for>
									</target>
								</configuration>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>ant-contrib</groupId>
								<artifactId>ant-contrib</artifactId>
								<version>1.0b3</version>
								<exclusions>
									<exclusion>
										<groupId>ant</groupId>
										<artifactId>ant</artifactId>
									</exclusion>
								</exclusions>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
